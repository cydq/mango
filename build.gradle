import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id "org.jetbrains.kotlin.jvm" version "1.8.22"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    maven {
        name = "Ladysnake Libs"
        url = "https://ladysnake.jfrog.io/artifactory/mods"
    }

    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
}

loom {
    splitEnvironmentSourceSets()

    accessWidenerPath = file("src/main/resources/mango.accesswidener")

    mods {
        "mango" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"

            runDir "build/datagen"
        }
    }
}

// Add the generated resources to the main source set
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // Amethyst
    modImplementation include(project(":amethyst"))

    // Trinkets API
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"

    // LibGui
    modImplementation include("io.github.cottonmc:LibGui:${project.libgui_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = 17
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

gradle.taskGraph.whenReady { graph ->
    tasks.named("genCommonSourcesWithCfr") {
        dependsOn(":amethyst:unpickCommonJar")
    }

    def hasRootRunTask = graph.hasTask(":runClient")

    if (hasRootRunTask) {
        graph.getAllTasks().each { task ->
            def subRunTask = (task.path =~ /:.+:runClient/)

            if (subRunTask) {
                task.enabled = false
            }
        }
    }
}
